{
    "python": "print('Hello, World!')",
    "javascript": "console.log('Hello, World!');",
    "java": "public class Main { public static void main(String[] args) { System.out.println('Hello, World!'); } }",
    "c": "#include <stdio.h>\nint main() { printf('Hello, World!'); return 0; }",
    "c++": "#include <iostream>\nint main() { std::cout << 'Hello, World!'; return 0; }",
    "ruby": "puts 'Hello, World!'",
    "php": "<?php\n  echo 'Hello, World!';\n?>",
    "swift": "print('Hello, World!')",
    "go": "package main\nimport 'fmt'\nfunc main() { fmt.Println('Hello, World!') }",
    "rust": "fn main() { println!('Hello, World!'); }",
    "kotlin": "fun main() { println('Hello, World!') }",
    "typescript": "console.log('Hello, World!');",
    "shell": "echo 'Hello, World!'",
    "bash": "echo 'Hello, World!'",
    "lua": "print('Hello, World!')",
    "haskell": "main = putStrLn 'Hello, World!'",
    "perl": "print 'Hello, World!';",
    "scala": "object Main extends App { println('Hello, World!') }",
    "r": "cat('Hello, World!')",
    "matlab": "disp('Hello, World!')",
    "elixir": "IO.puts 'Hello, World!'",
    "clojure": "(println 'Hello, World!')",
    "objective-c": "#import <stdio.h>\nint main() {\n  printf('Hello, World!');\n  return 0;\n}",
    "assembly_x86": "section .data\nmsg db 'Hello, World!',0\nsection .text\nglobal _start\n_start:\n  ; write our message to stdout\n  mov eax, 4\n  mov ebx, 1\n  mov ecx, msg\n  mov edx, 13\n  int 0x80\n  ; exit program\n  mov eax, 1\n  xor ebx, ebx\n  int 0x80",
    "assembly_mips": ".data\nmsg: .asciiz 'Hello, World!'\n.text\n.globl main\nmain:\n  li $v0, 4\n  la $a0, msg\n  syscall\n  li $v0, 10\n  syscall",
    "brainfuck": "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>>.<<-.+++.------.--------.>>+.>++.",
    "malbolge": "&%:9]!~}|z2xwv-,POqponl$HjIiGfD~CB@?>=<;:9876543210/.-,+'*)%$#\"!``",
    "whitespace": "   \t\t\n\t\t   \t\n\t\t \t\t\n  \n \t\t\n\t\t",
    "elf": "start: print 'Hello, World!'",
    "intercal": "COME FROM .1\n  .1  (1)\n  PLEASE DO .2  WITH 1\n  .2  (1)\n  PLEASE READ OUT .3  WITH 1\n  .3  (1)\n  PLEASE SAY 'Hello, World!'",
    "piet": "# An image-based programming language, 'Hello, World!' in Piet is represented visually, not textually.",
    "befunge": ">0",
    "aheui": "ㅁㄴㅇㄹㄷㅁㅇㅏㅇㅡㅡㅡㅇㅣㅅㅡㅡㄴㅁ",
    "umlang": "어떻게 \n 엄.......... .......... \n 식어! \n식ㅋ \n식어ㅋ\n이 사람이름이냐ㅋㅋ",
    "glossolalia": "I G A C A B G C A B",
    "arrow": "a:=a@a:=>a<",
    "vml": "write Hello, World!",
    "shakespeare": "The play begins.\nAct I: Scene I\n[Enter a nobleman and a woman]\nNobleman: Speak, world, and tell us what thou hast to say. To me, I wish to hear thy voice.\nWoman: You shall, nobleman, you shall. For I, too, long for the words thou seeketh.\n[Exeunt]",
    "rocks": "start( ) print('Hello, World!')",
    "FALSE": "f a l s e .",
    "paradigms": "write 'Hello, World!'",
    "overtone": "run (println 'Hello, World!')",
    "zig": "const std = @import(\"std\");\n\npub fn main() void {\n    std.debug.print(\"Hello, World!\\n\", .{});\n}"
}